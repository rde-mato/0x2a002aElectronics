#ifndef SPI_H
#define SPI_H

#define SLAVE_COUNT				4

#define SPI1_CS0_GPIO			TRISBbits.TRISB10
#define SPI1_CS1_GPIO			TRISBbits.TRISB11
#define SPI1_CS2_GPIO			TRISBbits.TRISB12
#define SPI1_CS3_GPIO			TRISBbits.TRISB15
#define CS_MCP_LCD				LATBbits.LATB10
#define CS_MCP_ENCODERS			LATBbits.LATB11
#define CS_EEPROM				LATBbits.LATB12
#define CS_SD					LATBbits.LATB15
#define SPI1_RECEIVE_FLAG		IFS1bits.SPI1RXIF
#define SPI1_TRANSFER_FLAG		IFS1bits.SPI1TXIF
#define SPI1_INT_FLAGS_CLR_RX	IFS1CLR = (1 << 5)
#define SPI1_INT_FLAGS_CLR_TX	IFS1CLR = (1 << 6)
#define SPI1_INT_PRIORITIES		IPC7bits.SPI1IP
#define SPI1_RECEIVE_ENABLE		IEC1bits.SPI1RXIE
#define SPI1_TRANSMIT_ENABLE	IEC1bits.SPI1TXIE
#define SPI1_READY		SPI1_action == E_SPI1_ACTION_NONE


union
{
	struct
	{
		u8	eeprom_w:1;
		u8	eeprom_r:1;
		u8	MCP_encoders_r:1;
		u8	LCD_w:1;
		u8	SD_r:1;
		u8	SD_w:1;
	};
	struct
	{
		u8	all;
	};
} SPI1Fbits;

enum	E_SPI1_STATE
{
	E_SPI1_DONE = 0,
	E_SPI1_LCD_CONFIG,
	E_SPI1_LCD_WRITE_ENABLE_HIGH,
	E_SPI1_LCD_WRITE_ENABLE_LOW,
	E_SPI1_LCD_RELEASE,
	E_SPI1_ENC_READ_INT_FLAG,
	E_SPI1_ENC_READ_INT_CAP,
	E_SPI1_ENC_RELEASE,
	E_SPI1_EEPROM_CHECK_BUSY,
	E_SPI1_EEPROM_CHECK_BUSY_2,
	E_SPI1_EEPROM_CHECK_BUSY_3,
	E_SPI1_EEPROM_WRITE_ENABLE_1,
	E_SPI1_EEPROM_WRITE_ENABLE_2,
	E_SPI1_EEPROM_CHECK_WREN,
	E_SPI1_EEPROM_CHECK_WREN_2,
	E_SPI1_EEPROM_CHECK_WREN_3,
	E_SPI1_EEPROM_WRITE_INSTRUCTION,
	E_SPI1_EEPROM_WRITE_ADDRESS_FIRST_BYTE,
	E_SPI1_EEPROM_WRITE_ADDRESS_SECOND_BYTE,
	E_SPI1_EEPROM_WRITE_DATA,
	E_SPI1_EEPROM_WRITE_PAGE_DONE,
	E_SPI1_EEPROM_WRITE_CALLBACK,
	E_SPI1_EEPROM_READ_INSTRUCTION,
	E_SPI1_EEPROM_READ_ADDRESS_FIRST_BYTE,
	E_SPI1_EEPROM_READ_ADDRESS_SECOND_BYTE,
	E_SPI1_EEPROM_READ_ADDRESS_START_READ,
	E_SPI1_EEPROM_READ_DATA,
	E_SPI1_EEPROM_READ_CALLBACK,
	E_SPI1_SDCARD_READ_INIT,
	E_SPI1_SDCARD_READ_SEND_BLOCK_ADDRESS,
	E_SPI1_SDCARD_READ_SEND_DUMMY_CRC_AND_START_RETRIES,
	E_SPI1_SDCARD_READ_RETRY_TILL_NOT_BUSY,
	E_SPI1_SDCARD_READ_RETRY_TILL_TOKEN,
	E_SPI1_SDCARD_READ_GET_ONE_BYTE,
	E_SPI1_SDCARD_READ_SEND_FINAL_FFS_1,
	E_SPI1_SDCARD_READ_SEND_FINAL_FFS_2,
	E_SPI1_SDCARD_READ_RELASE,
	E_SPI1_SDCARD_READ_ERROR,
	E_SPI1_SDCARD_READ_LAST_FF,
	E_SPI1_SDCARD_WRITE_INIT,
	E_SPI1_SDCARD_WRITE_SEND_BLOCK_ADDRESS,
	E_SPI1_SDCARD_WRITE_SEND_DUMMY_CRC_AND_START_RETRIES,
	E_SPI1_SDCARD_WRITE_RETRY_TILL_NOT_BUSY,
	E_SPI1_SDCARD_WRITE_WAIT_ONE_BYTE,
	E_SPI1_SDCARD_WRITE_SEND_START_TOKEN,
	E_SPI1_SDCARD_WRITE_SEND_ONE_BYTE,
	E_SPI1_SDCARD_WRITE_RETRY_TILL_DATA_RESPONSE,
	E_SPI1_SDCARD_WRITE_SEND_FF_TILL_END_OF_00,
	E_SPI1_SDCARD_WRITE_RELASE,
	E_SPI1_SDCARD_WRITE_ERROR,
	E_SPI1_SDCARD_WRITE_LAST_FF
};

enum	E_SPI1_ACTION
{
	E_SPI1_ACTION_NONE = 0,
	E_SPI1_ACTION_LCD_WRITE,
	E_SPI1_ACTION_ENCODERS_READ,
	E_SPI1_ACTION_SD_READ,
	E_SPI1_ACTION_SD_WRITE,
	E_SPI1_ACTION_EEPROM_READ,
	E_SPI1_ACTION_EEPROM_WRITE
};

#endif/* SPI_H */
