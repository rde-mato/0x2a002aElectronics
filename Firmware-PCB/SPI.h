#ifndef SPI_H
#define	SPI_H

#define SPI1_READY (SPI1_state == E_SPI1_DONE)

#define SLAVE_COUNT             4

#define SPI1_CS0_GPIO           TRISBbits.TRISB10
#define SPI1_CS1_GPIO		TRISBbits.TRISB11
#define SPI1_CS2_GPIO		TRISBbits.TRISB12
#define SPI1_CS3_GPIO		TRISBbits.TRISB15
#define CS_MCP_LCD		LATBbits.LATB10
#define CS_MCP_ENCODERS		LATBbits.LATB11
#define CS_EEPROM		LATBbits.LATB12
#define CS_SD			LATBbits.LATB15
#define SPI1_RECEIVE_FLAG	IFS1bits.SPI1RXIF
#define SPI1_TRANSFER_FLAG	IFS1bits.SPI1TXIF
#define SPI1_INT_FLAGS_CLR_RX	IFS1CLR = (1 << 5)
#define SPI1_INT_FLAGS_CLR_TX	IFS1CLR = (1 << 6)
#define SPI1_INT_PRIORITIES	IPC7bits.SPI1IP
#define SPI1_RECEIVE_ENABLE	IEC1bits.SPI1RXIE
#define SPI1_TRANSMIT_ENABLE	IEC1bits.SPI1TXIE

enum E_SPI1_STATE {
    E_SPI1_DONE = 0,
    E_SPI1_LCD_CONFIG,
    E_SPI1_LCD_WRITE_ENABLE_HIGH,
    E_SPI1_LCD_WRITE_ENABLE_LOW,
    E_SPI1_LCD_RELEASE,
    E_SPI1_ENC_READ_INT_FLAG,
    E_SPI1_ENC_READ_INT_CAP,
    E_SPI1_ENC_RELEASE,
    E_SPI1_EEPROM_WRITE_ENABLE,
    E_SPI1_EEPROM_WRITE_ENABLE_OK,
    E_SPI1_EEPROM_WAIT_WRITE_STAT_OK,
    E_SPI1_EEPROM_STILL_WAIT_WRITE_STAT_OK,
    E_SPI1_EEPROM_WRITE_MODE,
    E_SPI1_EEPROM_WRITE_ADDRESS,
    E_SPI1_EEPROM_WRITE_DATA,
    E_SPI1_EEPROM_WRITE_NEXT_PAGE,
    E_SPI1_EEPROM_WRITE_END,
    E_SPI1_EEPROM_WRITE_DISABLE,
    E_SPI1_EEPROM_WRITE_DISABLE_WAIT,
    E_SPI1_EEPROM_WRITE_DISABLE_OK,
    E_SPI1_EEPROM_WAIT_WRDI_OK,
    E_SPI1_EEPROM_STILL_WAIT_WRDI_OK,
    E_SPI1_EEPROM_WRITE_DONE,
    E_SPI1_EEPROM_READ_ENABLE,
    E_SPI1_EEPROM_READ_ENABLE_OK,
    E_SPI1_EEPROM_READ_MODE,
    E_SPI1_EEPROM_READ_ADDRESS,
    E_SPI1_EEPROM_WAIT_READ_STAT_OK,
    E_SPI1_EEPROM_READ_DATA,
    E_SPI1_EEPROM_READ_DONE
};

enum E_SPI1_SLAVE {
    E_SPI1_CS_MCP_LCD = 0,
    E_SPI1_CS_MCP_ENC,
    E_SPI1_CS_SD,
    E_SPI1_CS_EEPROM
};

#endif	/* SPI_H */

