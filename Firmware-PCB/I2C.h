#ifndef I2C_H
#define	I2C_H

#define I2C1_READY		(I2C1_state == E_I2C1_DONE)
#define I2C1_INT_FLAG_CLR	IFS1CLR = (1 << 12)
#define I2C1_PIN_GPIO		TRISBbits.TRISB8
#define I2C1_PIN_LATCH 		LATBbits.LATB8
#define I2C1_INT_PRIORITY	IPC8bits.I2C1IP
#define I2C1_INT_ENABLE		IEC1bits.I2C1MIE
#define I2C1_RW_READ		0
#define I2C1_RW_WRITE		1
#define I2C1_ACK		0
#define I2C1_NACK		1

#define I2C1_WRITE_BUF_SIZE     10
#define I2C1_READ_BUF_SIZE      10

enum E_I2C1_STATE {
    E_I2C1_DONE = 0,
    E_I2C1_WRITE,
    E_I2C1_WRITING_ADDR_CMD,
    E_I2C1_RESTART_ADDR_CMD,
    E_I2C1_SEND_SLAVE_ADDR,
    E_I2C1_READ,
    E_I2C1_NACK,
    E_I2C1_ACK,
    E_I2C1_WRITING_SLAVE_ADDR_WRITE,
    E_I2C1_WRITING_COMMAND_REGISTER,
    E_I2C1_SENDING_CMD_REGISTER_STOP,
    E_I2C1_SENDING_CMD_REGISTER_RESTART,
    E_I2C1_WRITING_SLAVE_ADDR_READ,
    E_I2C1_START_READING_BYTE,
    E_I2C1_READ_AND_ACK,
    E_I2C1_READ_AND_NACK,
    E_I2C1_CALLBACK
};

#endif	/* I2C_H */

